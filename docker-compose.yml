version: '3.8'

services:
  postgres:
    image: postgres:14
    container_name: projectmanager-postgres
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-projectmanager}
    ports:
      - "5432:5432"
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    build:
      context: ./packages/api
      dockerfile: Dockerfile
    container_name: projectmanager-api
    restart: always
    volumes:
      - api_data:/app/data
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${API_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-projectmanager}
      JWT_SECRET: ${JWT_SECRET:-change-this-in-production}
      PLANE_URL: ${PLANE_URL:-http://plane:3000/api}
      OUTLINE_URL: ${OUTLINE_URL:-http://outline:3001/api}
    ports:
      - "${API_PORT:-3001}:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    command: >
      sh -c "npm run prisma:migrate && npm run db:seed && npm start"

  web:
    build:
      context: ./packages/web
      dockerfile: Dockerfile
    container_name: projectmanager-web
    restart: always
    volumes:
      - web_data:/app/data
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${WEB_PORT:-3000}
      API_URL: ${API_URL:-http://localhost:3001}
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      - api
    networks:
      - app-network

volumes:
  postgres_data:
  api_data:
  web_data:

networks:
  app-network:
    driver: bridge 